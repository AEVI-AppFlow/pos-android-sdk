version = "2.0.0-SNAPSHOT"
ext.sampleVersionCode = 02000001 // semver based, MMmmppbb (major minor patch build)

buildscript {
    repositories {
        jcenter()
        google()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.1'
    }
}

allprojects {

    project.ext {
        apiVersion = rootProject.version
        sampleVersionCode = rootProject.sampleVersionCode
    }

    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()
        maven {
            url "http://dl.bintray.com/aevi/aevi-uk"
        }
        maven {
            url "http://sdk-public-artifacts.s3-website-eu-west-1.amazonaws.com/maven2"
        }
        if (project.hasProperty('aws_accessid')) {
            maven {
                url "s3://sdk-snapshots.aevi.com/maven2"
                credentials(AwsCredentials) {
                    accessKey aws_accessid
                    secretKey aws_accesskey
                }
            }
            maven {
                url "s3://sdk-qa.aevi.com/maven2"
                credentials(AwsCredentials) {
                    accessKey aws_accessid
                    secretKey aws_accesskey
                }
            }
            maven {
                url "s3://sdk-releases.aevi.com/maven2"
                credentials(AwsCredentials) {
                    accessKey aws_accessid
                    secretKey aws_accesskey
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
    delete 'documentation/public'
}

task copyApiLibs(type: Copy) {
    from 'payment-initiation-api/build/libs'
    from 'payment-flow-service-api/build/libs'
    into 'artifacts/libs'
}

task copyApks(type: Copy) {
    from 'PaymentInitiationSample/build/outputs/apk/debug'
    from 'PaymentServiceSample/build/outputs/apk/debug'
    from 'FlowServiceSample/build/outputs/apk/debug'
    exclude 'output.json'
    into 'artifacts/samples'
}

apply from: 'dependencies.gradle'

def exportedProjects = [
        ":flow-base-api",
        ":payment-flow-service-api",
        ":payment-initiation-api"
]

def baseAndFlowService = [
        ":flow-base-api",
        ":payment-initiation-api",
        ":payment-flow-service-api"
]

def baseAndInitiation = [
        ":flow-base-api",
        ":payment-initiation-api"
]

configure(subprojects.findAll {
    exportedProjects.contains(":" + it.name)
}) {
    apply plugin: 'java'
    apply plugin: 'de.fuerstenau.buildconfig'
    apply plugin: 'idea'
}

task mergeBaseAndFlowServiceDocs(type: Javadoc) {
    source baseAndFlowService.collect { project(it).sourceSets.main.allJava }
    classpath = files(baseAndFlowService.collect { project(it).sourceSets.main.compileClasspath }, baseAndFlowService.collect {
        project(it).sourceSets.main.runtimeClasspath
    })
    destinationDir = file('documentation/public/javadocs/payment-flow-service-api')
    title = "Payment Flow Service API"
    exclude "**/BaseApiClient**"
    exclude "**/PaymentClient**"
    exclude "**/PaymentApi**"
    exclude "**/BaseListenerService**"
    exclude "**/config/**"
    exclude "**/InternalData**"
    exclude "**/AppMessage**"
    exclude "**/util/**"
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task mergeBaseAndInitiationDocs(type: Javadoc) {
    source baseAndInitiation.collect { project(it).sourceSets.main.allJava }
    classpath = files(baseAndInitiation.collect { project(it).sourceSets.main.compileClasspath }, baseAndInitiation.collect {
        project(it).sourceSets.main.runtimeClasspath
    })
    destinationDir = file('documentation/public/javadocs/payment-initiation-api')
    title = "Payment Initiation API"
    exclude "**/**ClientImpl**"
    exclude "**/BaseGenericService**"
    exclude "**/BasePostGenericService**"
    exclude "**/BaseGenericService**"
    exclude "**/BaseListenerService**"
    exclude "**/**StageModel**"
    exclude "**/InternalData**"
    exclude "**/AppMessage**"
    exclude "**/util/**"
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocs(dependsOn: [mergeBaseAndFlowServiceDocs, mergeBaseAndInitiationDocs]) {
}

apply from: 'dist.gradle'
