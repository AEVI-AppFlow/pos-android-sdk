version = "1.0.0-SNAPSHOT"

buildscript {
    repositories {
        jcenter()
        google()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8'
    }
}

allprojects {

    project.ext {
        apiVersion = rootProject.version
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://maven.google.com' }
        maven {
            url "s3://sdk-snapshots.aevi.com/maven2"
            credentials(AwsCredentials) {
                accessKey aws_accessid
                secretKey aws_accesskey
            }
        }
        maven {
            url "s3://sdk-qa.aevi.com/maven2"
            credentials(AwsCredentials) {
                accessKey aws_accessid
                secretKey aws_accesskey
            }
        }
        maven {
            url "s3://sdk-releases.aevi.com/maven2"
            credentials(AwsCredentials) {
                accessKey aws_accessid
                secretKey aws_accesskey
            }
        }
        maven {
            url "http://dl.bintray.com/aevi/aevi-uk"
        }
        maven {
            url "http://sdk-public-artifacts.s3-website-eu-west-1.amazonaws.com/maven2"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
    delete 'documentation/public'
}

task copyApiLibs(type: Copy) {
    from 'payment-api/build/libs'
    from 'payment-service-api/build/libs'
    from 'flow-service-api/build/libs'
    into 'build/libs'
}

apply from: 'dependencies.gradle'

def exportedProjects = [
        ":api-constants",
        ":flow-base-api",
        ":flow-service-api",
        ":payment-initiation-api",
        ":payment-service-api"
]

configure(subprojects.findAll {
    exportedProjects.contains(":" + it.name)
}) {
    apply plugin: 'java'
    apply plugin: 'de.fuerstenau.buildconfig'
    apply plugin: 'idea'
}

task alljavadoc(type: Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}
