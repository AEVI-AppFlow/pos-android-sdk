apply plugin: 'com.android.library'

apply from: gradleScript('lib/versioning.gradle')
apply from: gradleScript('android/versioning.gradle')
apply from: gradleScript('publish/publishing-utils.gradle')
apply from: gradleScript('android/basic-library.gradle')

group = 'com.aevi.sdk.pos.flow'
version = libraryVersion
description = 'payment-initiation-api'

publishingUtils?.publication {
    groupId group
    artifactId project.name
    version libraryVersion
}

apply from: gradleScript('publish/publish-maven-central.gradle')

android {
    defaultConfig {
        buildConfigField("String", "NAME", "\"${project.name}\"")
        buildConfigField("String", "VERSION", "\"${libraryVersion}\"")
        buildConfigField("long", "BUILD_TIME", "${System.currentTimeMillis()}L")
    }
}


dependencies {
    api project(':flow-base-api')

    implementation apiDependencies.gson
    api apiDependencies.rxJava
    api apiDependencies.rxMessenger
    api apiDependencies.jsonConverter
    api apiDependencies.archLifecycle
    api apiDependencies.archLifecycleJava8

    testImplementation project(':payment-flow-service-api') // So we have access to certain builders
    testImplementation sampleDependencies.appFlowConstants
    testImplementation testDependencies.junit
    testImplementation testDependencies.mockito
    testImplementation testDependencies.assertJ
    testImplementation testDependencies.hamcrestAll
    testImplementation testDependencies.robolectric
    testImplementation testDependencies.androidxCore

}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    source += fileTree(dir: "$buildDir/generated/source/buildConfig/release/")
    classpath += files(android.getBootClasspath())
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }

    title "Payment API"
    options.memberLevel = JavadocMemberLevel.PUBLIC
    failOnError false
}