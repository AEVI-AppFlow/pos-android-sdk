package com.aevi.sdk.pos.flow;


import com.aevi.sdk.pos.flow.model.*;

import io.reactivex.Observable;
import io.reactivex.Single;

/**
 * Payment client that exposes all the functions supported to query for payment services and initiate payments, etc.
 *
 * Please see {@link com.aevi.sdk.flow.FlowClient} for more general flow functions.
 */
public interface PaymentClient {

    /**
     * Query for all the installed payment services available on this and connected devices.
     *
     * Returns a single that emits a {@link PaymentServices} model wrapping the list of available payment services.
     *
     * This should be queried each time a selection is required to ensure up to date information.
     *
     * You can subscribe to {@link com.aevi.sdk.flow.FlowClient#subscribeToEventStream()} for updates on changes to the available payment services.
     *
     * @return Single emitting a {@link PaymentServices} object
     */
    Single<PaymentServices> getPaymentServices();

    /**
     * Initiate payment processing based on the provided {@link Request}.
     *
     * In order to receive processing status updates for this request, please subscribe via {@link #subscribeToStatusUpdates(String)}.
     *
     * @param request The request to process
     * @return Single emitting a {@link Response} object containing all the details of the processing
     */
    Single<Response> initiatePayment(Request request);

    /**
     * Request for a card token to be generated by any available payment service.
     *
     * @return Single emitting a {@link TokenResponse} containing the tokenised value of a customers card
     */
    Single<TokenResponse> generateCardToken();

    /**
     * Request for a card token to be generated by the payment service with the provided id.
     *
     * @return Single emitting a {@link TokenResponse} containing the tokenised value of a customers card
     */
    Single<TokenResponse> generateCardToken(String paymentServiceId);

    /**
     * Get the current request states of the request previously initiated via {@link #initiatePayment(Request)}.
     *
     * Note that this is a synchronous, blocking call. Do not call this on the UI thread.
     *
     * @param requestId The id of the request to check for
     * @return A {@link RequestStatus} object containing the current request status of the request processing
     */
    RequestStatus getCurrentRequestStatus(String requestId);

    /**
     * Subscribe to receive status updates of a particular request.
     *
     * @param requestId The unique Id of the request to monitor
     * @return Observable emitting a stream of {@link RequestStatus} objects indicating the status of the request processing
     */
    Observable<RequestStatus> subscribeToStatusUpdates(String requestId);
}
