package com.aevi.sdk.flow.model;

import com.aevi.sdk.flow.constants.CustomerDataKeys;
import com.aevi.util.json.JsonConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import io.reactivex.annotations.NonNull;
import io.reactivex.annotations.Nullable;

/**
 * Represents a paying customer with associated customer details and tokens.
 */
public class Customer extends BaseModel {

    private String fullName;
    private AdditionalData customerDetails;
    private List<Token> tokens;

    /**
     * Create a new Customer instance with a unique id.
     *
     * @param id The unique id
     */
    public Customer(String id) {
        super(id);
        customerDetails = new AdditionalData();
        tokens = new ArrayList<>();
    }

    /**
     * Get the customer id.
     *
     * This identifier is bespoke to the application that created the Customer and there are no guarantees that it is unique across Customers
     * generated by different applications.
     *
     * @return The customer id
     */
    @NonNull
    @Override
    public String getId() {
        return super.getId();
    }

    /**
     * Get the full name for this customer.
     *
     * Please see the customer details for name broken down into first name, surname, middle names, etc.
     *
     * @return The customer full name, or null if not set.
     */
    @Nullable
    public String getFullName() {
        return fullName;
    }

    /**
     * Set the full name for the Customer. See {@link #constructFullName(String, String[], String)} for assistance.
     *
     * @param fullName The customer full name.
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Convenience wrapper for adding additional customer data.
     *
     * This can be used to set arbitrary data to be passed on in the request to down-stream flow apps and/or payment apps.
     *
     * See {@link AdditionalData#addData(String, Object[])} for more info.
     *
     * @param key    The key to use for this data
     * @param values An array of values for this data
     * @param <T>    The type of object this data is an array of
     */
    public <T> void addCustomerDetails(String key, T... values) {
        customerDetails.addData(key, values);
    }

    /**
     * Get the optional customer details, such as phone number, address, etc.
     *
     * @return The Options representing customer details. May be empty.
     */
    @NonNull
    public AdditionalData getCustomerDetails() {
        return customerDetails;
    }

    /**
     * Add a customer token.
     *
     * @param token Token to add
     */
    public void addToken(Token token) {
        tokens.add(token);
    }

    /**
     * Retrieve the list of tokens associated with this customer.
     *
     * @return The list of token. May be empty.
     */
    @NonNull
    public List<Token> getTokens() {
        return tokens;
    }

    @Override
    public String toJson() {
        return JsonConverter.serialize(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        Customer customer = (Customer) o;

        if (fullName != null ? !fullName.equals(customer.fullName) : customer.fullName != null) return false;
        if (customerDetails != null ? !customerDetails.equals(customer.customerDetails) : customer.customerDetails != null) return false;
        return tokens != null ? tokens.equals(customer.tokens) : customer.tokens == null;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (fullName != null ? fullName.hashCode() : 0);
        result = 31 * result + (customerDetails != null ? customerDetails.hashCode() : 0);
        result = 31 * result + (tokens != null ? tokens.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "Customer{" +
                "fullName='" + fullName + '\'' +
                '}';
    }

    public static Customer fromJson(String json) {
        return JsonConverter.deserialize(json, Customer.class);
    }

    /**
     * Construct a full customer name from the option fields "firstName", "middleNames" and "surname" provided in the Customer details and
     * then set the fullName field to the result.
     *
     * Example - "John", ["Steve"], "Doe" is set as "John Steve Doe".
     *
     * First name at a minimum is mandatory.
     *
     * @param customer Customer instance
     */
    public static void setFullNameFromCustomerDetails(Customer customer) {
        String firstName = customer.getCustomerDetails().getValue(CustomerDataKeys.FIRST_NAME, String.class);
        String surname = customer.getCustomerDetails().getValue(CustomerDataKeys.SURNAME, String.class);
        String[] middleNames = customer.getCustomerDetails().getValue(CustomerDataKeys.MIDDLE_NAMES, String[].class);

        customer.setFullName(constructFullName(firstName, middleNames, surname));
    }

    /**
     * Construct a full name from the provided first name, middle names and surname fields.
     *
     * Example - "John", ["Steve"], "Doe" returns "John Steve Doe".
     *
     * First name at a minimum is mandatory.
     *
     * @param firstName   First name
     * @param middleNames Middle names
     * @param surname     Surname
     * @return The full name, or empty string if name fields are not set.
     */
    public static String constructFullName(String firstName, String[] middleNames, String surname) {

        if (firstName == null) {
            return "";
        }

        StringBuilder nameBuilder = new StringBuilder();
        nameBuilder.append(firstName);
        nameBuilder.append(' ');
        if (middleNames != null) {
            for (String middleName : middleNames) {
                nameBuilder.append(middleName);
                nameBuilder.append(' ');
            }
        }
        if (surname != null) {
            nameBuilder.append(surname);
        }
        return nameBuilder.toString();
    }

    /**
     * Construct a Customer instance from the provided details.
     *
     * Throws IllegalArgumentException for invalid input.
     *
     * @param id       The id of the customer
     * @param fullName The full name (as constructed by {@link #constructFullName(String, String[], String)} )
     * @param tokens   The list of tokens to assign to the customer
     * @return The Customer instance.
     */
    public static Customer fromFullNameAndToken(String id, String fullName, Token... tokens) {
        String[] names = fullName.split(" ");
        if (fullName.isEmpty() || names.length == 0) {
            throw new IllegalArgumentException("Full name must contain a first name at a minimum");
        }
        if (tokens.length == 0) {
            throw new IllegalArgumentException("Must specify at least one token");
        }

        Customer customer = new Customer(id);
        customer.setFullName(fullName);
        AdditionalData customerDetails = customer.getCustomerDetails();
        customerDetails.addData(CustomerDataKeys.FIRST_NAME, names[0]);

        if (names.length > 1) {
            customerDetails.addData(CustomerDataKeys.SURNAME, names[names.length - 1]);
        }

        if (names.length > 2) {
            String[] middleNames = new String[names.length - 2];
            System.arraycopy(names, 1, middleNames, 0, middleNames.length);
            customerDetails.addData(CustomerDataKeys.MIDDLE_NAMES, middleNames);
        }

        customer.getTokens().addAll(Arrays.asList(tokens));
        return customer;
    }
}
